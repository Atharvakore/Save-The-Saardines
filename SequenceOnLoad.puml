@startuml
actor User
participant Coordinator as JSONparser

User -> JSONparser: main(map.json, corporations.json, scenario.json, 0)
activate JSONparser
create "accu: Accumulator" as accu
JSONparser -> accu :  Accumulator
activate accu
accu --> JSONparser : accu
deactivate accu

create parser as "m: MapJSONParser"
JSONparser -> parser : MapJSONParser(accu)
activate parser
parser --> JSONparser: m
deactivate parser
JSONparser -> parser: parseMap(map.json)
activate parser
parser -> parser: createObjects(map.json)
activate parser
parser --> parser : objects: List<ParsedObject>
deactivate parser
parser -> parser: this.accu.setParsedTiles(objects)
activate parser
parser --> parser :
deactivate parser


loop for object in accu.parsedTiles

parser->parser:validateTile(object)
activate parser
parser -> parser: validateUniqueId(id)
activate parser
parser --> parser: True
deactivate parser
parser -> parser: validateCoordinates(coord)

activate parser
parser --> parser: True
deactivate parser
parser -> parser: validateRequirements(category, harbor, current, direction, speed, intensity)
activate parser
parser --> parser: True
deactivate parser
parser-->parser: True
deactivate parser
create "t:Tiles" as Tiles
parser -> Tiles: Tiles(id, coord, shipTraversable)
activate Tiles

Tiles --> parser: t
deactivate Tiles
parser -> parser: this.accu.tiles.add(id, t)
activate parser
parser --> parser
deactivate parser

parser -> parser: this.tilesbyCoord.add(coord, t)
activate parser
parser --> parser
deactivate parser
parser --> parser : True
deactivate parser
end
create "m:Map" as map
parser -> map : Map(tiles.getValues(), tilesbyCoord)
activate map
map --> parser: m
deactivate map
participant Logger as log
parser -> log: logInitializationInfoSuccess(maps.json)
activate log
log --> parser:
deactivate log
parser-->JSONparser: m
deactivate parser
create corparser as "c: CorporartionJSONParser"
JSONparser -> corparser: CorporationJSONParser(m)
activate corparser
corparser --> JSONparser : c
deactivate corparser
JSONparser -> corparser: parseShips(corporations.json)

activate corparser
corparser -> corparser: createObjects(corporations.json)
activate corparser
corparser --> corparser : objects: List<ParsedObject>
deactivate corparser
corparser -> corparser: this.accu.setParsedShips(objects)
activate corparser
corparser --> corparser :
deactivate corparser

loop for shipObject in this.accu.parsedShips

corparser -> corparser:ValidateShip(shipObject)
activate corparser
corparser -> corparser: validateShipUniqueId(id)
activate corparser
corparser --> corparser: True
deactivate corparser
corparser -> corparser: validateShipUniqueName(name)
activate corparser
corparser --> corparser: True
deactivate corparser
corparser -> corparser: validateShiplocation(locationId)
activate corparser
corparser -> map: getTilebyId(locationId)
activate map
map --> corparser: tile
deactivate map
corparser -->corparser: True
deactivate corparser
corparser -> corparser: validateShipAttributes(type, maxVelocity, acceleration, fuelCapacity, fuelConsumption, visibilityRange, garbageType, capacity)
activate corparser
corparser --> corparser: True
deactivate corparser
create "s:Ship" as ship
corparser -> ship: Ship(id, name, tile, maxVelocity, acceleration, fuelCapacity, fuelConsumption, visibilityRange, garbageType, capacity)
activate ship
ship -> corparser: s
deactivate ship
corparser -> corparser: this.accu.mapCorporationToShips.get(locationId).add(id)
activate corparser
corparser --> corparser

deactivate corparser
corparser --> corparser: True
deactivate corparser
end
corparser --> JSONparser: ships
deactivate corparser
JSONparser -> corparser: parseCorporations(corporations.json)
activate corparser
activate corparser
corparser -> corparser: createObjects(corporations.json)
activate corparser
corparser --> corparser : objects: List<ParsedObject>
deactivate corparser
corparser -> corparser: this.accu.setParsedCorporations(objects)
activate corparser
corparser --> corparser :
deactivate corparser
loop for corporationObject in this.accu.parsedCorporations
corparser -> corparser: ValidateCorporation(corporationObject)
activate corparser
corparser -> corparser : validateCorporationUniqueId(id)
activate corparser
corparser --> corparser: True
deactivate corparser
corparser-> corparser: validateCorporationUniqueName(name)
activate corparser
corparser --> corparser: True
deactivate corparser
corparser -> corparser: validateHarborTiles(homeHarbors)
activate corparser
loop for id in homeHarbors
corparser -> accu: getTilebyId(id)
activate accu
accu --> corparser : t
deactivate accu
end
corparser --> corparser: True
deactivate corparser
corparser -> corparser: validateCorporationShip(ships)
activate corparser
loop for id in ships
corparser -> accu: getShipById(id)
activate accu
accu --> corparser : s
deactivate accu
end
corparser -> corparser : this.accu.mapCorporationToShips.get(id)
activate corparser
corparser --> corparser : shouldBeShips: List<Int>
deactivate corparser
corparser --> corparser: True
deactivate corparser
corparser -> corparser : validateCorporationGarbageTypes()
activate corparser
corparser --> corparser: True
deactivate corparser
corparser --> corparser : True
deactivate corparser
end
corparser -> log : logInitializationInfoSuccess(corporations.json)
activate log
log --> corparser
deactivate log
corparser --> JSONparser : corporations
deactivate corparser
create "Sc: ScenarioJSONParser" as scparser
JSONparser -> scparser
activate scparser
scparser -> JSONparser: Sc
deactivate scparser
JSONparser -> scparser : parseGarbage(Scenario.json)
activate scparser
scparser -> scparser: createObjects(Scenario.json)
activate scparser
scparser --> scparser : objects: List<ParsedObject>
deactivate scparser
scparser -> scparser: this.accu.setParsedGarbage(objects)
activate scparser
scparser --> scparser
deactivate scparser
loop for garbageObject in parsedGarbage
scparser -> scparser : validateGarbage(garbageObject)
activate scparser
scparser -> scparser: validateGarbageUniqueId(id)
activate scparser
scparser --> scparser: True
deactivate scparser
scparser -> scparser: validateGarbageTypeAndAmount(type, amount)
activate scparser
scparser --> scparser: True
deactivate scparser
scparser -> scparser: validateGarbageLocation(locationId)
activate scparser
scparser -> map : getTilebyId(locationId)
activate map
map --> scparser: t
deactivate map
scparser --> scparser: True
deactivate scparser
create "g: Garbage " as garbage
scparser -> garbage: Garbage(id, amount, type, t)
activate garbage
garbage --> scparser: g
deactivate garbage
deactivate scparser
end
scparser --> JSONparser: garbage
deactivate scparser
JSONparser -> scparser: parseEvents(Scenario.json)
activate scparser
scparser -> scparser: createObjects(Scenario.json)
activate scparser
scparser --> scparser : objects: List<ParsedObject>
deactivate scparser
scparser -> scparser: this.accu.setParsedGarbage(objects)
activate scparser
scparser --> scparser
deactivate scparser
loop eventObject in parsedEvents
scparser -> scparser: validateEvent(eventObject)
activate scparser
scparser -> scparser: validateUniqueId(id)
activate scparser
scparser --> scparser: True
deactivate scparser
scparser -> scparser: validateAttributes(type, duration, location, radius, speed, amount, direction, shipId)
activate scparser
scparser --> scparser: True
deactivate scparser
create "event: Event" as event
scparser -> event: event(id, type, tick, duration, location, radius, speed, amount, direction, shipID)
activate event
event --> scparser: event
deactivate event

end
deactivate scparser
scparser -> log: logInitializationInfoSuccess(scenario.json)
activate log
log --> scparser
deactivate log
scparser --> JSONparser: events
deactivate scparser

loop for g in garbage
JSONparser -> JSONparser: m.getTilebyId(g.getLocationId()).addGarbage(g)
activate JSONparser
JSONparser --> JSONparser
deactivate JSONparser
end
create "s: Simulation" as sim

JSONparser -> sim: sim(corporations, events, 0, 0, m)
activate sim
sim --> JSONparser : s
deactivate sim
JSONparser ->sim : start()
activate sim
sim -> log :







@enduml