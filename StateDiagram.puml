@startuml
[*] --> MapParsed
MapParsed --> MapValidated: validateMapJSON()[parseSuccessful]
MapParsed --> SimulationFailed : parseMapJSON()[parseFailed]
[*] --> SimulationFailed : parseMapJSON()[parseFailed]

MapValidated --> CorporationParsed : parseCorporationsJSON()[parseSuccessful]
MapValidated --> SimulationFailed : parseCorporationsJSON()[ValidationFailed]
CorporationParsed -->CorporationValidated : validateCorporation()[validationSuccessful]
CorporationParsed -->SimulationFailed : validateCorporation()[validationFailed]
CorporationValidated --> ScenarioParsed : parseScenarioJSON [parseSuccessful]
ScenarioParsed --> ScenarioValidated : validateScenario()[validationSuccessful]
ScenarioParsed --> SimulationFailed : validateScenario()[validationFailed]
CorporationValidated --> SimulationFailed : parseScenarioJSON()[parseFailed]

SimulationFailed --> [*]

ScenarioValidated--> SimulationStarted : startSimulation()

SimulationStarted --> TickStarted : tick()

TickStarted --> CorporationPresent : checkCorporations()
CorporationPresent --> ShipsMoved : moveShips() [corporationsPresent]
ShipsMoved --> GarbageCollected : collectGarbage()
GarbageCollected --> CorporationsCorporated : corporate()
CorporationsCorporated --> ShipsUnloaded : unloadShips()
ShipsUnloaded --> ShipsRefueled : refuelShips()
ShipsRefueled --> CorporationPresent : checkCorporations()[True]
CorporationPresent --> GarbageDrifted : driftGarbage() [corporationsAbsent]
GarbageDrifted --> ShipsDrifted : driftShips()
ShipsDrifted --> EventsProcessed : processEVents()
EventsProcessed --> TickStarted : [currentTick!=eventTick]
EventsProcessed --> EventsStarted : [currentTick=eventTick]
EventsStarted --> TickStarted : []
TickStarted --> SimulationStatistics : [CurrentTick=max_ticks]
SimulationStatistics --> SimulationSuccessful 
SimulationSuccessful --> [*]
@enduml

