@startuml
participant "sim:Simulator" as sim
participant "c1:Corporation" as c1
participant "task: CollectGarbageTask" as task
participant "s1:ScoutingShip" as s1
participant "s2:CollectingShip" as s2
participant "reward:ContainerReward" as reward
participant "m:Sea" as m
participant "t23:ShallowOcean" as t23
participant "tile66:DeepOcean" as tile66
participant "tile67:DeepOcean" as tile67
participant "current:Current" as current
participant "oil:Garbage" as oil
participant "d: Dijkstra" as d


activate sim

note left of sim
    The simulation of tick 44 is done before
end note

sim -> sim: tick ()
activate sim

loop for corporation in {c1}
sim -> c1: getActiveTasks()
activate c1

c1 -> sim: {task}
deactivate c1
end

loop for task in {task}

sim -> task: actUponTick(44)
activate task

task -> task: checkCondition()
activate task

task -> s2: getPos()
activate s2

s2 --> task: t23
deactivate s2

task --> task: true
deactivate task

task -> reward: applyReward(s1)
activate reward

reward -> s1: addCapability (capability)
activate s1

s1 --> reward
deactivate

reward --> task
deactivate reward

task --> sim: true
deactivate task

sim -> c1: removeTask(task)
activate c1

c1 --> sim
deactivate c1
end
sim --> sim
deactivate sim

note left of sim
Start of tick 45
end note
sim --> sim: tick()
activate sim

sim -> sim: runCorporations()
activate sim

loop for corporation in {c1}

sim -> c1: getOwnedShips()
activate c1

c1 --> sim: listOfShips = {s1,s2}
deactivate c1

end

loop for corporation in {c1}
note left of sim
Moving the scoutingShips
end note
loop for corporation in {c1}
sim -> c1: run(sea, listOfShipsOfOtherCorporations = {})
activate c1

c1 -> c1: moveShips(sea)
activate c1

c1 -> c1: filterCollectingShips()
activate c1

c1 --> c1: {s1,s2}
deactivate c1

c1 -> c1: filterScoutingShips()
activate c1

c1 --> c1: {s1}
deactivate c1

c1 -> c1: getActiveTasks()
activate c1

c1-->c1: {}
deactivate c1

loop for ship in {s1}

c1 -> s1: getTilesWithGarbageInFoV()
activate s1

s1 --> c1: {tile66}
deactivate s1
end

loop for tile in {tile66}

c1 -> tile66: getGarbageByType({OIL})
activate tile66

tile66 -> c1: {oil}
deactivate tile66
end

c1 -> d: execute(tile66)
activate d

d --> c1: MapTilesToPath
deactivate d


c1 -> c1: findClosestShip(MapTilesToPath, {s1})
activate c1

c1 --> c1: pathToShipS1
deactivate c1

c1 -> c1: findClosestHarbor(MapTilesToPath, ownedHarbors)
activate c1

c1 --> c1: pathToHarbor
deactivate c1

loop for scoutingShip in {s1}

c1 -> s1: isFuelSufficient(pathToShipS1.length + pathToHarbor.length)
activate s1

s1 --> c1: true
deactivate s1

c1 -> s1: move(pathToShipS1)
activate s1
loop for tile in pathToShipS1

s1 -> s1: setTile(tile66)
activate s1

s1 --> s1:
deactivate s1
end
s1 --> c1
deactivate s1
end



note left of c1
Proceed to move collectingShips to Garbages
end note
c1 -> c1: findClosestShip(MapTilesToPath, {s1,s2})
activate c1

c1 --> c1: pathToShipS1
deactivate c1

c1 -> c1: findClosestHarbor(MapTilesToPath, ownedHarbors)
activate c1

c1 --> c1: pathToHarbor
deactivate c1

loop for collectingShip in {s1,s2}

c1 -> s1: isFuelSufficient(pathToShipS1.length + pathToHarbor.length)
activate s1

s1 --> c1: true
deactivate s1

c1 -> s1: HasGarbageCapacity({oil})
activate s1

s1 --> c1: true
deactivate s1


c1 -> s1: move(pathToShipS1)
activate s1
loop for tile in pathToShipS1

s1 -> s1: setTile(tile66)
activate s1

s1 --> s1:
deactivate s1
end
s1 --> c1
deactivate s1
end

c1 --> c1
c1 -> c1: collectGarbage()
activate c1
c1 -> c1: filterCollectingShips()
activate c1
c1 --> c1: {s1,s2}
deactivate c1
note left of c1
Collecting all garbage possible
end note
loop for ship in {s1,s2}
c1 -> s1: collectGarbageFromCurrentTile()
activate s1
s1-> tile66:getAmountOfType(OIL)
activate tile66
tile66--> s1: 800
s1 -> tile66: removeGarbageOfType(OIL, 800)
tile66 --> s1:
deactivate tile66
s1 --> c1:
deactivate s1
c1 --> sim:
deactivate c1
end
c1 -->c1:
deactivate c1
note left of c1
Trying to cooperate with other Corporations
end note

c1 -> c1: cooperate()
activate c1
c1 -> c1 : filterCooperatingShips()
activate c1
c1 --> c1: {}
deactivate c1
c1 --> c1
deactivate c1


note left of c1
Trying to process ships which are on harbor
end note

c1 -> c1: refillAndUnloadShips()
activate c1
c1 -> c1:getAllShipsFromHarbors()
activate c1
c1 --> c1: {}
deactivate c1
c1 --> c1
deactivate c1
c1 --> sim
deactivate c1

end
note left of sim
End of simulation tick 45
end note

sim --> sim

deactivate sim

sim -> sim: processEvents()
activate sim

sim -> sim: getActiveEvents()
activate sim

sim --> sim: {}
deactivate sim

sim --> sim
deactivate sim

loop for corporation in {c1}
sim-> c1: getActiveTasks()
activate c1

c1 -> sim: {}
deactivate c1
end

sim --> sim
deactivate sim

@enduml