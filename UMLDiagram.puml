@startuml
'General
package GeneralEnums{
  enum Direction{
    D0,
    D60,
    D120,
    D180,
    D240,
    D300
  }
  enum GarbageType{
    OIL,
    PLASTIC,
    CHEMICALS
  }
}
class Vec2D{
  + posX: Int,
  + posY: Int
}
class Corporation {
  - id:Int,
  - partner:Corporation
  - name:String,
  - acceptedGarbageTypes: List<GarbageType>
  - ownedHarbors: List<Harbor>
  - ownedShips: List<Ship>
  + moveShips(),
  + collectGarbage(),
  + refuelShips()
  + unloadShips()
  +cooperateWith(c1:Corporation)
}
class Dijkstra{
  + execute(Tile): Map<Tile,Int>
}

Dijkstra --o Simulation


Coordinator o-- Parser
Event --o Simulation
Ship --o Corporation
Tile --o Map
Logger --o Coordinator


class Coordinator {
 + main(mapFile : String, corporationsFile: String, scenarioFile: String, max_ticks: Int)
 - parse(): Accumulator
}
Coordinator -- Simulation
class Map {
  - tiles: List<Tile>
  - tileIndex: Map<Vec2D, Tile>
  + getTileById(Int): Tile
  + getTiles(): List<Tile>
  + addTile(Tile): void
  + getTileByPosition(Vec2D): Tile
}


class Simulation {
  - corporations: List<Corporation>
  - allEvents: List<Event>
  - tick: Int
  - maxTick: Int
  - map: Map
  + start()
  + tick()
  - runCorporations()
  - processEvents()
}
Corporation --o Simulation
Map --o Simulation
package Event{
  abstract class Event {
    - id: Int,
    + act(Simulation)
  }
  Pirate_Attack --|> Event
  class Pirate_Attack {
    - ship: Ship,
  }
  Local_Event --|> Event
  abstract class Local_Event {
    - location: Tile,
    - radius: Int,
  }
  Storm --|> Local_Event
  class Storm {
    - speed: Int,
    - direction: Direction
  }
  OilSpill --|> Local_Event
  class OilSpill {
    amount: Int,
  }
  Restriction --|> Local_Event
  class Restriction {
    duration: Int,
  }
}
package Parser {
  enum TileCategory {
    LAND,
    SHORE,
    SHALLOW_OCEAN,
    DEEP_OCEAN
  }
  class ParsedObject {
    + properties:Map<String,String>
  }
  interface JSONParser<T>{
    - logger: Logger
    - accumulator: Accumulator
    # validateObjects(object:List<ParsedObject>)
  }

  MapJSONParser --|> JSONParser


  class MapJSONParser {
    + parseMap(jsonFile:String): Boolean
    - validateTile(tile: ParsedObject): Boolean
    - validateUniqueId(id: Int): Boolean
    - validateCoordinates(coord: Vec2D): Boolean
    - validateRequirements(category: Category, harbor: boolean, current: Boolean, direction: Direction, speed: Int, Intensity: Int): Boolean
  }

  class CorporationJSONParser{
'    -map: Map
'    -corporations: List<Corporation>
'    -ships: Map<Int, Ship>
'    -mapCorporationToHarbor: Map<Int, List<Tile>>
'    -currentObject: ParsedObject
'    -mapCorporationToShips: Map<Int, List<Int>>


    +CorporationJSONParser(accumulator:Accumulator)
    +parseCorporations(filePath: String): Boolean
    +parseShips(filePath: String): Boolean

    - createCorporationObjects(file: String): List<ParsedObject>
    -validateCorporations(corpObjects: List<ParsedObject>): Boolean
    -validateCorporation(corporationObject: ParsedObject): Boolean
    -validateCorporationUniqueId(id: Int): Boolean
    -validateCorporationUniqueName(name: String): Boolean
    -validateHarborTiles(harbors: List<Int>): Boolean
    -validateCorporationGarbageTypes(g: GarbageType): Boolean
    -validateCorporationShip(ships: List<Int>): Boolean

    - createShipObjects(file: String): List<ParsedObject>
    - validateShips(ships: List<ParsedObject>):Boolean
    - validateShip(ship:ParsedObject): Boolean
    - validateShipUniqueId(id:Int): Boolean
    - validateShipUniqueName(name:String): Boolean
    - validateShipLocation(location: Int): Boolean
    - validateShipAttributes(ship:ParsedObject): Boolean
  }

  class ScenarioJSONParser{
    + ScenarioJSONParser(accumulator:Accumulator)
    + parseEvents(json: String)
    + parseGarbage(garbage: String): Garbage

    + validateGarbages(garbages:List<ParsedObject>)

    - validateGarbageUniqueId(): Boolean
    - validateGarbageType(): Boolean
    - validateGarbageLocationExists(): Boolean
    - validateGarbageAmount(): Boolean
    + createGarbage(garbage: ParsedObject)

    + validateEvents(events:List<ParsedObject>)

    + validateEvent(event: ParsedObject)

    - validateEventUniqueId(): Boolean
    - validateEventType(): Boolean
    - validateEventTick(): Boolean
    - validateEventLocation(): Boolean
    - validateEventRadius(): Boolean
    - validateEventSpeed(): Boolean
    - validateEventAmountIfExists(): Boolean
    - validateEventDirectionIfExists(): Boolean
    - validateEventShipIdIfExists(): Boolean
    + createEvent(event: ParsedObject)
  }

  JSONParser <|-- CorporationJSONParser
  JSONParser <|-- ScenarioJSONParser
  Accumulator --o JSONParser
  ParsedObject --o Accumulator
  class Accumulator {

    +parsedTiles: List<ParsedObject>
    +parsedCorporations: List<ParsedObject>
    +parsedShips: List<ParsedObject>
    +parsedGarbages: List<ParsedObject>
    +parsedEvents: List<ParsedObject>

    +currentValidatingObject: ParsedObject

    +map: Map
    +tiles: Map<Int, Tile>
    +tilesByCoordinat: Map<Vec2D, Tile>
    +corporations: Map<Int, Corporation>
    +ships: Map<Int, Ship>
    +events: Map<Int, Event>
    +garbage: Map<Int, Garbage>
    +mapCorporationToHarbor: Map<Int, List<Tile>>
    +mapCorporationToShips: Map<Int, List<Int>>
    +Getters()
    +addTile(id: Int, t: Tile): Unit
    +addTileByCoordinat(coord: Vec2D, t: Tile): Unit
    +addShip(shipId: Int, ship: Ship)
    +addShipToCorp(corporationId: Int, shipId: Int)

    + map: Map
    + tiles: Map<Int, Tile>
    + tilesByCoordinate: Map<Vec2D, Tile>
    + corporations: Map<Int, Corporation>
    + ships: Map<Int, Ship>
    + events: Map<Int, Event>
    + garbage: Map<Int, Garbage>
    + mapCorporationToHarbor: Map<Int, List<Tile>>
    + mapCorporationToShips: Map<Int, List<Int>>
    + Getters()

  }
}


package Tile{
  abstract class Tile{
    - id: Int,
    - pos: Vec2D,
    - adjacentTiles: Tile[6],
    - shipTraversable: Boolean,
    - garbage: List<Garbage>
    + isSpaceAvailable(Int): Boolean
    + driftGarbage(GarbageType, Int): void
    + getTileInDirection(distance: Int, dir: Direction): Tile
    + addGarbage(g: Garbage): void
    + isOilPresent(): Boolean
    + isPlasticPresent(): Boolean
    + areChemicalsPresent(): Boolean
  }


  class Garbage {
    -id: Int,
    -amount: Int,
    -type: GarbageType,
    -static maxId: Int,
    +drift(Tile)
    +static getNextId(): Int
    +canDriftAtOnce(Int): Boolean
    +removeAmount(Int): void
  }

  Garbage --> Tile

  Land --|> Tile
  Water --|> Tile

  Shore --|> Tile
  DeepOcean --|> Tile
  ShallowOcean --|> Tile

  class Current {
    - speed: Int,
    - direction: Direction,
    - intensity: Int,
    + getSpeed(): Int
    + getIntensity(): Int
    + getDirection(): Direction
  }
  class Land{
  }
  class Shore{
    - harbor: Harbor?
    + getHarbor(): Harbor?
  }
  class ShallowOcean{}
  class DeepOcean{
    - current: Current?
    + getCurrent(): Current?
  }

class Harbor {
  owner: List<Corporation>,
  pos: Tile,
}
Harbor --o Shore
}
'Ships
package Ship{
  abstract class Ship {
    - id: Int,
    - name: String,
    - owner: Corporation,
    - pos: Tile,
    - dir: Direction,
    - maxVelocity: Int,
    - acceleration: Int,
    - fuelCapacity: Int,
    - fuelConsumption: Int,
    - visibleRange: Int,
    - destinationTile: Tile,
    + navigateTo(Tile)
    + refuel()
    + giveGarbage()
    + getTilesWithGarbageInFoV(): List<Tile>
    + drift()
  }

  ScoutingShip --|> Ship
  CoordinatingShip --|> Ship
  CollectingShip --|> Ship

  class ScoutingShip{
  }
  class CoordinatingShip{
  }
  class CollectingShip{
    garbageType: GarbageType
    garbageCapacity: Int,
    garbageLoad: Int,
    + giveGarbage()
  }
}
package Logger{
  class Logger{
'  - writer: PrintWriter = new PrintWriter(System.out)
    - writer: PrintWriter
    + logInitializationInfoSuccess(filename:String)
    + logInitializationInfoFail(filename:String)
    + logSimulationStarted()
    + logSimulationEnded()
    + logSimulationTick(tick:Int)
    + logCorporationStartMoveShips(corporationId:Int)
    + logShipMovement(shipId:Int,speed:Int,tileId:Int)
    + logCorporationStartCollectGarbage(corporateId)
    + logGarbageCollectionByShip(shipId:Int,garbageType:GarbageType,garbageId:Int)
    + logCorporationCooperationStart(corporationId:Int)
    + logCooperationBetweenCorporations(corporationId:Int, otherCorporationId: Int, shipId:Int, cooperatedShipId: Int)
    + logCorporationRefueling(corporationId:Int)
    + logRefuelingShip(shipId:Int, tileId: Int)
    + logUnloadShip(shipId:Int, amount:Int, garbageType:GarbageType, tileId:Int)
    + logCorporationFinishedActions(corporationId:Int)
    + logCurrentDriftGarbage(garbageType:GarbageType, garbageId:Int, amount:Int, startTileId:Int, endTileId:Int)
    + logCurrentDriftShip(shipId:Int,startTileId:Int, endTileId:Int)
    + logEventStart(eventId:Int,eventType:EventType)
    + logSimulationStatisticsCalculated()
    + logSimulationStatistics()
  }
}
@enduml