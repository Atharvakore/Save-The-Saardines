@startuml
'General
package GeneralEnums{
  enum Direction{
    D0,
    D60,
    D120,
    D180,
    D240,
    D300
  }
  enum GarbageType{
    OIL,
    PLASTIC,
    CHEMICALS
  }
}
class Corporation {
  - id:Int,
  - partner:Corporation
  - name:String,
  - acceptedGarbageTypes: List<GarbageType>
  - ownedHarbors: List<Harbor>
  - ownedShips: List<Ship>
  +cooperateWith(c1:Corporation): Unit
  +run(): Unit
  -moveShips(): Unit
  -collectGarbage(): Unit
  -refuelShips(): Unit
  -unloadShips(): Unit

}
class Dijkstra{
  + execute(Tile): Map<Tile,Int>
}

Dijkstra --o Simulation



Main o-- Parser
Event --o Simulation

Tile --o GameMap
Logger --o Main


class Main {
 + main(mapFile : String, corporationsFile: String, scenarioFile: String, max_ticks: Int)
 - parse(): Accumulator
}
Main -- Simulation
class GameMap {
  + tiles: List<Tile>
  + tileIndex: Map<Vec2D, Tile>
  + getTileById(Int): Tile
  + getTiles(): List<Tile>
  + getTileByPosition(Vec2D): Tile
}

Events.Event --o Simulation
Ships.Ship --o Corporation
Tiles.Tile --o Tiles.GameMap
Loggers.Logger --o Main
Parser.JSONParser --o Main
Tiles.Vec2D --o Tiles.GameMap
Tiles.Vec2D --o Tiles.Tile




class Simulation {
  - corporations: List<Corporation>
  - allEvents: List<Event>
  - tick: Int
  - maxTick: Int
  - map: GameMap
  + start(): Unit
  + tick(): Unit
  - runCorporations(): Unit
  - processEvents(): Unit
}
Corporation --o Simulation
Tiles.GameMap --o Simulation
package Events{
  abstract class Event {
    - id: Int,
    + abstract tick(): Unit
  }
  Pirate_Attack --|> Event
  class Pirate_Attack {
    - ship: Ship,
    + override tick(): Unit
  }
  Local_Event --|> Event
  abstract class Local_Event {
    - map: GameMap,
    - location: Tile,
    - radius: Int,
  }
  Storm --|> Local_Event
  class Storm {
    - speed: Int,
    - direction: Direction,
    + override tick(): Unit
  }
  OilSpill --|> Local_Event
  class OilSpill {
    - amount: Int,
    + override tick(): Unit
  }
  Restriction --|> Local_Event
  class Restriction {
    - duration: Int,
    + override tick(): Unit
  }
}
package Parser {
  enum TileCategory {
    SHORE,
    SHALLOW_OCEAN,
    DEEP_OCEAN
  }
  class ParsedObject {
    + properties:Map<String,String>
  }
  interface JSONParser<T>{
    - logger: Logger
    - accumulator: Accumulator
    # validateObjects(object:List<ParsedObject>)
  }

  MapJSONParser --|> JSONParser


  class MapJSONParser {
    + parseMap(jsonFile:String): Boolean
    - createTileObjects(filePath: String): List<ParsedObject>
    - validateTiles(objects: List<ParsedObject>): Boolean
    - validateTile(tile: ParsedObject): Boolean
    - validateUniqueId(id: Int): Boolean
    - validateCoordinates(coord: Vec2D): Boolean
    - validateRequirements(tileObject: ParsedObject): Boolean
  }

  class CorporationJSONParser{
'    -map: GameMap
'    -corporations: List<Corporation>
'    -ships: Map<Int, Ship>
'    -mapCorporationToHarbor: Map<Int, List<Tile>>
'    -currentObject: ParsedObject
'    -mapCorporationToShips: Map<Int, List<Int>>


    +CorporationJSONParser(accumulator:Accumulator)
    +parseCorporations(filePath: String): Boolean
    +parseShips(filePath: String): Boolean

    - createCorporationObjects(file: String): List<ParsedObject>
    -validateCorporations(corpObjects: List<ParsedObject>): Boolean
    -validateCorporation(corporationObject: ParsedObject): Boolean
    -validateCorporationUniqueId(id: Int): Boolean
    -validateCorporationUniqueName(name: String): Boolean
    -validateHarborTiles(harbors: List<Int>): Boolean
    -validateCorporationGarbageTypes(g: List<GarbageType>): Boolean
    -validateCorporationShip(ships: List<Int>): Boolean

    - createShipObjects(file: String): List<ParsedObject>
    - validateShips(ships: List<ParsedObject>):Boolean
    - validateShip(ship:ParsedObject): Boolean
    - validateShipUniqueId(id:Int): Boolean
    - validateShipUniqueName(name:String): Boolean
    - validateShipLocation(location: Int): Boolean
    - validateShipAttributes(ship:ParsedObject): Boolean
  }

  class ScenarioJSONParser{
    + ScenarioJSONParser(accumulator:Accumulator)
    + parseEvents(json: String)
    + parseGarbage(garbage: String): Garbage

    + validateGarbages(garbages:List<ParsedObject>)

    + createGarbage(garbage: ParsedObject)

    + validateEvents(events:List<ParsedObject>)

    + validateEvent(event: ParsedObject)
    + createEvent(event: ParsedObject)

    - validateGarbageUniqueId(): Boolean
    - validateGarbageType(): Boolean
    - validateGarbageLocationExists(): Boolean
    - validateGarbageAmount(): Boolean


    - validateEventUniqueId(): Boolean
    - validateEventType(): Boolean
    - validateEventTick(): Boolean
    - validateEventLocation(): Boolean
    - validateEventRadius(): Boolean
    - validateEventSpeed(): Boolean
    - validateEventAmountIfExists(): Boolean
    - validateEventDirectionIfExists(): Boolean
    - validateEventShipIdIfExists(): Boolean
  }

  JSONParser <|-- CorporationJSONParser
  JSONParser <|-- ScenarioJSONParser
  Accumulator --o JSONParser
  ParsedObject --o Accumulator
  class Accumulator {

    +parsedTiles: List<ParsedObject>
    +parsedCorporations: List<ParsedObject>
    +parsedShips: List<ParsedObject>
    +parsedGarbages: List<ParsedObject>
    +parsedEvents: List<ParsedObject>

    +currentValidatingObject: ParsedObject

    +map: GameMap
    +corporations: Map<Int, Corporation>
    +ships: Map<Int, Ship>
    +events: Map<Int, Event>
    +garbage: Map<Int, Garbage>
    +mapCorporationToHarbor: Map<Int, List<Tile>>
    +mapCorporationToShips: Map<Int, List<Int>>
    +Getters()
    +addTile(id: Int, t: Tile): Unit
    +addTileByCoordinates(coord: Vec2D, t: Tile): Unit
    +addShip(shipId: Int, ship: Ship)
    +addShipToCorp(corporationId: Int, shipId: Int)
    +getShipsOfCorp(corpId: Int): List<Int>
    +addEvent(eventId: Int, event: Event)
    +addCorporation(corpId: Int, corporation: Corporation)
    +addGarbage(garbageId: Int, garbage: Garbage)

  }
}


package Tiles{
class Vec2D{
  + posX: Int,
  + posY: Int,
  + tilesInRadius(Int): Iterator<Vec2D>
}

class GameMap {
  + tiles: List<Tile>
  + tileIndex: Map<Vec2D, Tile>
  + getTileById(Int): Tile
  + getTiles(): List<Tile>
}

  abstract class Tile{
    - id: Int,
    - pos: Vec2D,
    - adjacentTiles: Tile[6],
    - shipTraversable: Boolean,
    - garbage: List<Garbage>
    +Tile(id: Int, pos: Vec2D, shipTraversable: Boolean): Tile
    + isSpaceAvailable(Int): Boolean
    + driftGarbage(GarbageType, Int): Unit
    + getTileInDirection(distance: Int, dir: Direction): Tile
    + addGarbage(g: Garbage): Unit
    + isOilPresent(): Boolean
    + isPlasticPresent(): Boolean
    + areChemicalsPresent(): Boolean
  }


  class Garbage {
    -id: Int,
    -amount: Int,
    -type: GarbageType,
    -static maxId: Int,
    +drift(Tile): Unit
    +static getNextId(): Int
    +canDriftAtOnce(Int): Boolean
    +removeAmount(Int): Unit
  }

  Garbage --> Tile

  Shore --|> Tile
  DeepOcean --|> Tile
  ShallowOcean --|> Tile

  class Current {
    - speed: Int,
    - direction: Direction,
    - intensity: Int,
    + getSpeed(): Int
    + getIntensity(): Int
    + getDirection(): Direction
  }
  class Shore{
    - harbor: Harbor?
    + getHarbor(): Harbor?
  }
  class ShallowOcean{}
  class DeepOcean{
    - current: Current?
    + getCurrent(): Current?
  }

class Harbor {
  owner: List<Corporation>,
  pos: Tile,
}
Harbor --o Shore
Current --o DeepOcean
}
'Ships
package Ships{
  abstract class Ship {
    - id: Int,
    - name: String,
    - owner: Corporation,
    - pos: Tile,
    - dir: Direction,
    - maxVelocity: Int,
    - acceleration: Int,
    - fuelCapacity: Int,
    - fuelConsumption: Int,
    - visibleRange: Int,
    - destinationTile: Tile,
    + setDestinationTile(Tile): Unit
    + refuel(): Unit
    + getTilesWithGarbageInFoV(): List<Tile>
    + drift(): Unit
    + setTile(Tile): Unit
  }

  ScoutingShip --|> Ship
  CoordinatingShip --|> Ship
  CollectingShip --|> Ship

  class ScoutingShip{
  }
  class CoordinatingShip{
  }
  class CollectingShip{
    garbageType: GarbageType
    garbageCapacity: Int,
    garbageLoad: Int,
    + giveGarbage(): Unit
  }
}
package Loggers{
  class Logger{
'  - writer: PrintWriter = new PrintWriter(System.out)
    - writer: PrintWriter
    + logInitializationInfoSuccess(filename:String): Unit
    + logInitializationInfoFail(filename:String): Unit
    + logSimulationStarted(): Unit
    + logSimulationEnded(): Unit
    + logSimulationTick(tick:Int): Unit
    + logCorporationStartMoveShips(corporationId:Int): Unit
    + logShipMovement(shipId:Int,speed:Int,tileId:Int): Unit
    + logCorporationStartCollectGarbage(corporateId): Unit
    + logGarbageCollectionByShip(shipId:Int,garbageType:GarbageType,garbageId:Int): Unit
    + logCorporationCooperationStart(corporationId:Int): Unit
    + logCooperationBetweenCorporations(corporationId:Int, otherCorporationId: Int, shipId:Int, cooperatedShipId: Int): Unit
    + logCorporationRefueling(corporationId:Int): Unit
    + logRefuelingShip(shipId:Int, tileId: Int): Unit
    + logUnloadShip(shipId:Int, amount:Int, garbageType:GarbageType, tileId:Int): Unit
    + logCorporationFinishedActions(corporationId:Int): Unit
    + logCurrentDriftGarbage(garbageType:GarbageType, garbageId:Int, amount:Int, startTileId:Int, endTileId:Int): Unit
    + logCurrentDriftShip(shipId:Int,startTileId:Int, endTileId:Int): Unit
    + logEventStart(eventId:Int,eventType:EventType): Unit
    + logSimulationStatisticsCalculated(): Unit
    + logSimulationStatistics(): Unit
  }
}
@enduml