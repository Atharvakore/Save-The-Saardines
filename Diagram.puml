@startuml
'General
  enum Direction{
    D0,
    D60,
    D120,
    D180,
    D240,
    D300
  }
  enum GarbageType{
    OIL,
    PLASTIC,
    CHEMICALS
  }

  enum ShipStatus{
  AVAILABLE,
  ON_THE_WAY,
  REFILLING
  }
   class Vec2D{
    posX: Int,
    posY: Int
  }

  interface Validator {
    ' Throws an exception if the object is not valid
    validateState(Object) : void
  }

class Scenario{
        ships: List<Ship>
        events:List<Event>
        garbage:List<Garbage>
}

class Garbage {
id:Int,
amount:Int,
type:GarbageType,
pos:Vec2D
}

  class Corporation implements Validator{
    id:Int,
    name:String,
    acceptedGarbageTypes: List<GarbageType>
    ownedHarbors : List<Harbor>
    ownedShips: List<Ship>

  }

  class Harbor {
           owner:Corporation
           refuelShip(Ship)
           takeGarbage(Ship)
  }


    class Simulation implements Validator{
        corporations: List<Corporation>
        scenario: Scenario
        tick: Int
        maxTick: Int
        map: (Id of Tile)

        start()
        tick()
    }
    package Event{
    abstract class Event implements Validator {
    id:Int,
    act(Simulation)
    }
     Event --|> Pirate_Attack
    class Pirate_Attack {
    ShipID:Int,
    }
    Event --|> Local_Event
    abstract class Local_Event {
    location : Int (Id of Tile) ,
     radius:Int,
    }
    Local_Event --|> Strom
    class Strom {
    speed: Int,
    direction: Direction
    }
    Local_Event --|> OilSpill
    class OilSpill {
    amount: Int,
    }
    Local_Event --|> Restriction
    class Restriction {
    duration: Int,
    }
    }

package Parser{
    interface JSONParser<T>{
    parse(String json):T
    }

    MapJSONParser --|> JSONParser
    class MapJSONParser<Map>{

    parseTile(String json)
    }

    CorporationJSONParser --|> JSONParser
    class CorporationJSONParser<Corporation>{
     parseCorporation(corporation:String)
     parseShip(ship:String)
     parseHarbors(harbors:String)
    }
        ScenarioJSONParser --|> JSONParser
        class ScenarioJSONParser<Scenario>{

        }
        }
'Tiles

package Tile{
abstract class Tile implements Validator{
    id:Int,
    pos:Vec2D,
    adjacentTiles:Tile[6],
    shipTraversable:Boolean,
}

Land --|> Tile
Water --|> Tile

Shore --|> Tile
DeepOcean --|> Tile
ShallowOcean --|> Tile

class Current{
    speed: Int,
    direction: Direction,
    intensity: Int
}
class Land{
}
class Shore{
harbor: Harbor?
}
class ShallowOcean{}
class DeepOcean{
current: Current?
}

}
'Ships
package Ship{
abstract class Ship implements Validator{
    id:Int,
    name: String,
    owner: Corporation,
    pos: Vec2D,
    dir: Direction,
    maxVelocity: Int,
    acceleration: Int,
    fuelCapacity: Int,
    fuelConsumption: Int,
    visibleRange: Int,

    getGarbageInFieldOfView((Id of Tile) tile): List<Garbage>
    navigateTo((Id of Tile) tile)
    refuel()
}

ScoutingShip --|> Ship
CoordinatingShip --|> Ship
CollectingShip --|> Ship

class ScoutingShip{
}
class CoordinatingShip{
}
class CollectingShip{
garbageType: GarbageType
garbageCapacity: Int,
garbageLoad: Int,
}
class Dijkstra{
}
}
package Logger{
class Logger{


}
}
@enduml