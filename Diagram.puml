@startuml
'General
  enum Direction{
    D0,
    D60,
    D120,
    D180,
    D240,
    D300
  }
  enum GarbageType{
    OIL,
    PLASTIC,
    CHEMICALS
  }

  enum ShipStatus{
  AVAILABLE,
  ON_THE_WAY,
  REFILLING
  }
   class Vec2D{
    posX: Int,
    posY: Int
  }

  interface Validator {
    ' Throws an exception if the object is not valid
    validateState(Object) : void
  }

class Scenario{
        ships: List<Ship>
        events:List<Event>
        garbage:List<Garbage>
}

class Garbage {
id:Int,
amount:Int,
type:GarbageType,
pos:Vec2D
}

Corporation --|> Validator
  class Corporation {
    id:Int,
    name:String,
    acceptedGarbageTypes: List<GarbageType>
    ownedHarbors : List<Harbor>
    ownedShips: List<Ship>

  }

  class Harbor {
           owner:Corporation
           refuelShip(Ship)
           takeGarbage(Ship)
  }

  class Map {
    tiles: List<Tile>
    getTileById(Int):Tile
    addTile(Tile):void
  }


    Simulation --|> Validator
    class Simulation {
        corporations: List<Corporation>
        scenario: Scenario
        tick: Int
        maxTick: Int
        map: Map

        start()
        tick()
    }
    package Event{
    Event --|> Validator
    abstract class Event {
    id:Int,
    act(Simulation)
    }
     Event --|> Pirate_Attack
    class Pirate_Attack {
    ShipID:Int,
    }
    Event --|> Local_Event
    abstract class Local_Event {
    location : Tile ,
     radius:Int,
    }
    Local_Event --|> Strom
    class Strom {
    speed: Int,
    direction: Direction
    }
    Local_Event --|> OilSpill
    class OilSpill {
    amount: Int,
    }
    Local_Event --|> Restriction
    class Restriction {
    duration: Int,
    }
    }

package Parser{
    class GenericJSONParser{
    parse(String json):Object
    }

    class MapJSONParser{
    parseMap(String json):Tile
    }

    class CorporationJSONParser{
     parseCorporation(corporation:String):Corporation
     parseShip(ship:String):Ship
     parseHarbors(harbors:String):Harbor
    }

        class ScenarioJSONParser{
          parseGarbage(garbage:String):Garbage
        }
        GenericJSONParser --> MapJSONParser
        GenericJSONParser --> CorporationJSONParser
        GenericJSONParser --> ScenarioJSONParser
        }
'Tiles

package Tile{
Simulation --|> Tile
abstract class Tile{
    id:Int,
    pos:Vec2D,
    adjacentTiles:Tile[6],
    shipTraversable:Boolean,
}

Land --|> Tile
Water --|> Tile

Shore --|> Tile
DeepOcean --|> Tile
ShallowOcean --|> Tile

class Current{
    speed: Int,
    direction: Direction,
    intensity: Int
}
class Land{
}
class Shore{
harbor: Harbor?
}
class ShallowOcean{}
class DeepOcean{
current: Current?
}

}
'Ships
package Ship{
Simulation --|> Ship
abstract class Ship {
    id:Int,
    name: String,
    owner: Corporation,
    pos: Vec2D,
    dir: Direction,
    maxVelocity: Int,
    acceleration: Int,
    fuelCapacity: Int,
    fuelConsumption: Int,
    visibleRange: Int,

    getGarbageInFieldOfView(Tile): List<Garbage>
    navigateTo(Tile)
    refuel()
}

ScoutingShip --|> Ship
CoordinatingShip --|> Ship
CollectingShip --|> Ship

class ScoutingShip{
}
class CoordinatingShip{
}
class CollectingShip{
garbageType: GarbageType
garbageCapacity: Int,
garbageLoad: Int,
}
class Dijkstra{
  computeDistance(Tile, Tile): Int
}
}
package Logger{
class Logger{

}
}
@enduml