@startuml
'General
  enum Direction{
    D0,
    D60,
    D120,
    D180,
    D240,
    D300
  }
  enum GarbageType{
    OIL,
    PLASTIC,
    CHEMICALS
  }

  enum ShipStatus{
  AVAILABLE,
  ON_THE_WAY,
  REFILLING
  }
   class Vec2D{
    posX: Int,
    posY: Int
  }


  class Corporation {
    id:Int,
    name:String,
    acceptedGarbageTypes: List<GarbageType>
    ownedHarbors : List<Harbor>
    ownedShips: List<Ship>
    moveShips()
  }

  class Dijkstra{
    computeDistance(Tile, Tile): Int
  }

  class Harbor {
           owner:Corporation
           +refuelShip(Ship)
           +takeGarbage(Ship)
  }

  class Map {
    tiles: List<Tile>
    tileIndex: Map<Vec2D, Tile>

    +getTileById(Int):Tile
    +addTile(Tile):void
    +getTileByPosition(Vec2D):Tile
  }


    class Simulation {
        corporations: List<Corporation>
        events:List<Event>
        ships: List<Ship>
        tick: Int
        maxTick: Int
        map: Map

        +start()
        +tick()
        +corporationsSharing(Corporation, Corporation):Boolean
    }
    package Event{
    abstract class Event {
    id:Int,
    +act(Simulation)
    }
     Pirate_Attack --|> Event
    class Pirate_Attack {
    ShipID:Int,
    }
    Local_Event --|> Event
    abstract class Local_Event {
    location : Tile ,
     radius:Int,
    }
    Storm --|> Local_Event
    class Storm {
    speed: Int,
    direction: Direction
    }
    OilSpill --|> Local_Event
    class OilSpill {
    amount: Int,
    }
    Restriction --|> Local_Event
    class Restriction {
    duration: Int,
    }
    }

package Parser{

  interface Validator {
    ' Throws an exception if the object is not valid
    validateState(Object) : void
  }
    interface JSONParser<T>{
    -jsonObjects: Map<String,Array<JSONObject>>
    +parse(String jsonFile):Boolean
    -getNextObject(jsonObject: String)
    }
    MapJSONParser --|> JSONParser
    class MapJSONParser<Map>{
    -tiles: Map<Int,Tile>
    -currentTile: Tile
    +parseMap(jsonFile:String): Boolean
    -parseNextTile(String json)
    -validateTile()
    -validateUniqueId()
    -validateCoordinates()
    -validateTileCategory()
    -validateHarborifExists()
    -validateCurrentIfExists()

    }

    class CorporationJSONParser{
     parseCorporation(corporation:String):Corporation
     parseShip(ship:String):Ship
     parseHarbors(harbors:String):Harbor
    }

        class ScenarioJSONParser{
          parseGarbage(garbage:String):Garbage
        }
        JSONParser <|-- CorporationJSONParser
        JSONParser <|-- ScenarioJSONParser
        }
'Tiles

package Tile{
abstract class Tile{
    id:Int,
    pos:Vec2D,
    adjacentTiles:Tile[6],
    shipTraversable:Boolean,
    garbage:List<Garbage>
}

class Garbage {
id:Int,
amount:Int,
type:GarbageType,
+drift(Tile)
}

Garbage --> Tile

Land --|> Tile
Water --|> Tile

Shore --|> Tile
DeepOcean --|> Tile
ShallowOcean --|> Tile

class Current{
    speed: Int,
    direction: Direction,
    intensity: Int
}
class Land{
}
class Shore{
harbor: Harbor?
}
class ShallowOcean{}
class DeepOcean{
current: Current?
}

}
'Ships
package Ship{
abstract class Ship {
    id:Int,
    name: String,
    owner: Corporation,
    pos: Tile,
    dir: Direction,
    maxVelocity: Int,
    acceleration: Int,
    fuelCapacity: Int,
    fuelConsumption: Int,
    visibleRange: Int,

    navigateTo(Tile)
    refuel()
    getGarbageInFieldOfView(): List<Garbage>
    drift()
}

ScoutingShip --|> Ship
CoordinatingShip --|> Ship
CollectingShip --|> Ship

class ScoutingShip{
}
class CoordinatingShip{
}
class CollectingShip{
garbageType: GarbageType
garbageCapacity: Int,
garbageLoad: Int,
}
}
package Logger{
class Logger{


}
}
@enduml